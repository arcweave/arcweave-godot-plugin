//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ArcscriptParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Arcweave.Interpreter {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ArcscriptParser : ArcscriptParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CODESTART=1, PARAGRAPHSTART=2, BLOCKQUOTESTART=3, NORMAL_WHITESPACE=4, 
		PARAGRAPHEND=5, BQ_CODESTART=6, BQ_PARAGRAPHSTART=7, BLOCKQUOTEEND=8, 
		BQ_WHITESPACE=9, CODEEND=10, MENTION_TAG_OPEN=11, FLOAT=12, INTEGER=13, 
		DIGIT=14, LPAREN=15, RPAREN=16, ASSIGNMUL=17, ASSIGNDIV=18, ASSIGNADD=19, 
		ASSIGNSUB=20, MUL=21, DIV=22, ADD=23, SUB=24, GE=25, GT=26, LE=27, LT=28, 
		EQ=29, NE=30, AND=31, OR=32, ASSIGN=33, NEG=34, COMMA=35, LBRACE=36, RBRACE=37, 
		BOOLEAN=38, FNAME=39, VFNAME=40, VFNAMEVARS=41, IFKEYWORD=42, ELSEKEYWORD=43, 
		ELSEIFKEYWORD=44, ENDIFKEYWORD=45, ANDKEYWORD=46, ORKEYWORD=47, ISKEYWORD=48, 
		NOTKEYWORD=49, STRING=50, VARIABLE=51, WHITESPACE=52, TAG_CLOSE=53, ATTR_NAME=54, 
		TAG_EQUALS=55, MENTION_TAG_CLOSE=56, TAG_WHITESPACE=57, TAG_OPEN=58, MENTION_LABEL=59, 
		ATTR_VALUE=60, ATTRIBUTE=61;
	public const int
		RULE_input = 0, RULE_script = 1, RULE_script_section = 2, RULE_blockquote = 3, 
		RULE_paragraph = 4, RULE_paragraph_start = 5, RULE_codestart = 6, RULE_codeend = 7, 
		RULE_assignment_segment = 8, RULE_function_call_segment = 9, RULE_conditional_section = 10, 
		RULE_if_section = 11, RULE_else_if_section = 12, RULE_else_section = 13, 
		RULE_if_clause = 14, RULE_else_if_clause = 15, RULE_endif_segment = 16, 
		RULE_statement_assignment = 17, RULE_statement_function_call = 18, RULE_argument_list = 19, 
		RULE_argument = 20, RULE_mention = 21, RULE_mention_attributes = 22, RULE_additive_numeric_expression = 23, 
		RULE_multiplicative_numeric_expression = 24, RULE_signed_unary_numeric_expression = 25, 
		RULE_unary_numeric_expression = 26, RULE_function_call = 27, RULE_void_function_call = 28, 
		RULE_sign = 29, RULE_variable_list = 30, RULE_compound_condition_or = 31, 
		RULE_compound_condition_and = 32, RULE_negated_unary_condition = 33, RULE_unary_condition = 34, 
		RULE_condition = 35, RULE_conditional_operator = 36, RULE_expression = 37;
	public static readonly string[] ruleNames = {
		"input", "script", "script_section", "blockquote", "paragraph", "paragraph_start", 
		"codestart", "codeend", "assignment_segment", "function_call_segment", 
		"conditional_section", "if_section", "else_if_section", "else_section", 
		"if_clause", "else_if_clause", "endif_segment", "statement_assignment", 
		"statement_function_call", "argument_list", "argument", "mention", "mention_attributes", 
		"additive_numeric_expression", "multiplicative_numeric_expression", "signed_unary_numeric_expression", 
		"unary_numeric_expression", "function_call", "void_function_call", "sign", 
		"variable_list", "compound_condition_or", "compound_condition_and", "negated_unary_condition", 
		"unary_condition", "condition", "conditional_operator", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'</blockquote>'", null, 
		"'</code></pre>'", "'<span'", null, null, null, "'('", "')'", "'*='", 
		"'/='", "'+='", "'-='", "'*'", "'/'", "'+'", "'-'", null, null, null, 
		null, "'=='", "'!='", null, "'||'", null, "'!'", "','", "'{'", "'}'", 
		null, null, "'show'", null, "'if'", "'else'", "'elseif'", "'endif'", "'and'", 
		"'or'", "'is'", "'not'", null, null, null, "'>'", null, null, "'/span>'", 
		null, "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CODESTART", "PARAGRAPHSTART", "BLOCKQUOTESTART", "NORMAL_WHITESPACE", 
		"PARAGRAPHEND", "BQ_CODESTART", "BQ_PARAGRAPHSTART", "BLOCKQUOTEEND", 
		"BQ_WHITESPACE", "CODEEND", "MENTION_TAG_OPEN", "FLOAT", "INTEGER", "DIGIT", 
		"LPAREN", "RPAREN", "ASSIGNMUL", "ASSIGNDIV", "ASSIGNADD", "ASSIGNSUB", 
		"MUL", "DIV", "ADD", "SUB", "GE", "GT", "LE", "LT", "EQ", "NE", "AND", 
		"OR", "ASSIGN", "NEG", "COMMA", "LBRACE", "RBRACE", "BOOLEAN", "FNAME", 
		"VFNAME", "VFNAMEVARS", "IFKEYWORD", "ELSEKEYWORD", "ELSEIFKEYWORD", "ENDIFKEYWORD", 
		"ANDKEYWORD", "ORKEYWORD", "ISKEYWORD", "NOTKEYWORD", "STRING", "VARIABLE", 
		"WHITESPACE", "TAG_CLOSE", "ATTR_NAME", "TAG_EQUALS", "MENTION_TAG_CLOSE", 
		"TAG_WHITESPACE", "TAG_OPEN", "MENTION_LABEL", "ATTR_VALUE", "ATTRIBUTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ArcscriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ArcscriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ArcscriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ArcscriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ArcscriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodestartContext codestart() {
			return GetRuleContext<CodestartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_orContext compound_condition_or() {
			return GetRuleContext<Compound_condition_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeendContext codeend() {
			return GetRuleContext<CodeendContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76;
				script();
				State = 77;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 79;
				codestart();
				State = 80;
				compound_condition_or();
				State = 81;
				codeend();
				State = 82;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Script_sectionContext[] script_section() {
			return GetRuleContexts<Script_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Script_sectionContext script_section(int i) {
			return GetRuleContext<Script_sectionContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 2, RULE_script);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 86;
					script_section();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Script_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockquoteContext[] blockquote() {
			return GetRuleContexts<BlockquoteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockquoteContext blockquote(int i) {
			return GetRuleContext<BlockquoteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphContext[] paragraph() {
			return GetRuleContexts<ParagraphContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphContext paragraph(int i) {
			return GetRuleContext<ParagraphContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_segmentContext assignment_segment() {
			return GetRuleContext<Assignment_segmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_segmentContext function_call_segment() {
			return GetRuleContext<Function_call_segmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_sectionContext conditional_section() {
			return GetRuleContext<Conditional_sectionContext>(0);
		}
		public Script_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Script_sectionContext script_section() {
		Script_sectionContext _localctx = new Script_sectionContext(Context, State);
		EnterRule(_localctx, 4, RULE_script_section);
		try {
			int _alt;
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 91;
						blockquote();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 94;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 96;
						paragraph();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 99;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 101;
				assignment_segment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 102;
				function_call_segment();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 103;
				conditional_section();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockquoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKQUOTESTART() { return GetToken(ArcscriptParser.BLOCKQUOTESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKQUOTEEND() { return GetToken(ArcscriptParser.BLOCKQUOTEEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphContext[] paragraph() {
			return GetRuleContexts<ParagraphContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphContext paragraph(int i) {
			return GetRuleContext<ParagraphContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_segmentContext[] assignment_segment() {
			return GetRuleContexts<Assignment_segmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_segmentContext assignment_segment(int i) {
			return GetRuleContext<Assignment_segmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_segmentContext[] function_call_segment() {
			return GetRuleContexts<Function_call_segmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_segmentContext function_call_segment(int i) {
			return GetRuleContext<Function_call_segmentContext>(i);
		}
		public BlockquoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockquote; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockquote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockquoteContext blockquote() {
		BlockquoteContext _localctx = new BlockquoteContext(Context, State);
		EnterRule(_localctx, 6, RULE_blockquote);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(BLOCKQUOTESTART);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 198L) != 0)) {
				{
				State = 110;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 107;
					paragraph();
					}
					break;
				case 2:
					{
					State = 108;
					assignment_segment();
					}
					break;
				case 3:
					{
					State = 109;
					function_call_segment();
					}
					break;
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 115;
			Match(BLOCKQUOTEEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParagraphContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Paragraph_startContext paragraph_start() {
			return GetRuleContext<Paragraph_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAGRAPHEND() { return GetToken(ArcscriptParser.PARAGRAPHEND, 0); }
		public ParagraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraph; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParagraphContext paragraph() {
		ParagraphContext _localctx = new ParagraphContext(Context, State);
		EnterRule(_localctx, 8, RULE_paragraph);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			paragraph_start();
			State = 118;
			Match(PARAGRAPHEND);
			 this.currentLine++;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Paragraph_startContext : ParserRuleContext {
		public IToken _PARAGRAPHSTART;
		public IToken _BQ_PARAGRAPHSTART;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAGRAPHSTART() { return GetToken(ArcscriptParser.PARAGRAPHSTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BQ_PARAGRAPHSTART() { return GetToken(ArcscriptParser.BQ_PARAGRAPHSTART, 0); }
		public Paragraph_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraph_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraph_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Paragraph_startContext paragraph_start() {
		Paragraph_startContext _localctx = new Paragraph_startContext(Context, State);
		EnterRule(_localctx, 10, RULE_paragraph_start);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARAGRAPHSTART:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				_localctx._PARAGRAPHSTART = Match(PARAGRAPHSTART);
				 this.setLineStart(_localctx._PARAGRAPHSTART); 
				}
				break;
			case BQ_PARAGRAPHSTART:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				_localctx._BQ_PARAGRAPHSTART = Match(BQ_PARAGRAPHSTART);
				 this.setLineStart(_localctx._BQ_PARAGRAPHSTART); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodestartContext : ParserRuleContext {
		public IToken _CODESTART;
		public IToken _BQ_CODESTART;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODESTART() { return GetToken(ArcscriptParser.CODESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BQ_CODESTART() { return GetToken(ArcscriptParser.BQ_CODESTART, 0); }
		public CodestartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codestart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodestart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodestartContext codestart() {
		CodestartContext _localctx = new CodestartContext(Context, State);
		EnterRule(_localctx, 12, RULE_codestart);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CODESTART:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				_localctx._CODESTART = Match(CODESTART);
				 this.currentLine++; this.setLineStart(_localctx._CODESTART);
				}
				break;
			case BQ_CODESTART:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				_localctx._BQ_CODESTART = Match(BQ_CODESTART);
				 this.currentLine++; this.setLineStart(_localctx._BQ_CODESTART);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeendContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODEEND() { return GetToken(ArcscriptParser.CODEEND, 0); }
		public CodeendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeend; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeend(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeendContext codeend() {
		CodeendContext _localctx = new CodeendContext(Context, State);
		EnterRule(_localctx, 14, RULE_codeend);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(CODEEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_segmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodestartContext codestart() {
			return GetRuleContext<CodestartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_assignmentContext statement_assignment() {
			return GetRuleContext<Statement_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeendContext codeend() {
			return GetRuleContext<CodeendContext>(0);
		}
		public Assignment_segmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_segment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_segment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_segmentContext assignment_segment() {
		Assignment_segmentContext _localctx = new Assignment_segmentContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignment_segment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			codestart();
			State = 136;
			statement_assignment();
			State = 137;
			codeend();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_call_segmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodestartContext codestart() {
			return GetRuleContext<CodestartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_function_callContext statement_function_call() {
			return GetRuleContext<Statement_function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeendContext codeend() {
			return GetRuleContext<CodeendContext>(0);
		}
		public Function_call_segmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_segment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_segment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_segmentContext function_call_segment() {
		Function_call_segmentContext _localctx = new Function_call_segmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_function_call_segment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			codestart();
			State = 140;
			statement_function_call();
			State = 141;
			codeend();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_sectionContext if_section() {
			return GetRuleContext<If_sectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Endif_segmentContext endif_segment() {
			return GetRuleContext<Endif_segmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_sectionContext[] else_if_section() {
			return GetRuleContexts<Else_if_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_sectionContext else_if_section(int i) {
			return GetRuleContext<Else_if_sectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_sectionContext else_section() {
			return GetRuleContext<Else_sectionContext>(0);
		}
		public Conditional_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_sectionContext conditional_section() {
		Conditional_sectionContext _localctx = new Conditional_sectionContext(Context, State);
		EnterRule(_localctx, 20, RULE_conditional_section);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			if_section();
			State = 147;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 144;
					else_if_section();
					}
					} 
				}
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 150;
				else_section();
				}
				break;
			}
			State = 153;
			endif_segment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodestartContext codestart() {
			return GetRuleContext<CodestartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_clauseContext if_clause() {
			return GetRuleContext<If_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeendContext codeend() {
			return GetRuleContext<CodeendContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		public If_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_sectionContext if_section() {
		If_sectionContext _localctx = new If_sectionContext(Context, State);
		EnterRule(_localctx, 22, RULE_if_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			codestart();
			State = 156;
			if_clause();
			State = 157;
			codeend();
			State = 158;
			script();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodestartContext codestart() {
			return GetRuleContext<CodestartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_clauseContext else_if_clause() {
			return GetRuleContext<Else_if_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeendContext codeend() {
			return GetRuleContext<CodeendContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		public Else_if_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_sectionContext else_if_section() {
		Else_if_sectionContext _localctx = new Else_if_sectionContext(Context, State);
		EnterRule(_localctx, 24, RULE_else_if_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			codestart();
			State = 161;
			else_if_clause();
			State = 162;
			codeend();
			State = 163;
			script();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodestartContext codestart() {
			return GetRuleContext<CodestartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEKEYWORD() { return GetToken(ArcscriptParser.ELSEKEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeendContext codeend() {
			return GetRuleContext<CodeendContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		public Else_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_sectionContext else_section() {
		Else_sectionContext _localctx = new Else_sectionContext(Context, State);
		EnterRule(_localctx, 26, RULE_else_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			codestart();
			State = 166;
			Match(ELSEKEYWORD);
			State = 167;
			codeend();
			State = 168;
			script();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFKEYWORD() { return GetToken(ArcscriptParser.IFKEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_orContext compound_condition_or() {
			return GetRuleContext<Compound_condition_orContext>(0);
		}
		public If_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_clauseContext if_clause() {
		If_clauseContext _localctx = new If_clauseContext(Context, State);
		EnterRule(_localctx, 28, RULE_if_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(IFKEYWORD);
			State = 171;
			compound_condition_or();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIFKEYWORD() { return GetToken(ArcscriptParser.ELSEIFKEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_orContext compound_condition_or() {
			return GetRuleContext<Compound_condition_orContext>(0);
		}
		public Else_if_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_clauseContext else_if_clause() {
		Else_if_clauseContext _localctx = new Else_if_clauseContext(Context, State);
		EnterRule(_localctx, 30, RULE_else_if_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(ELSEIFKEYWORD);
			State = 174;
			compound_condition_or();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Endif_segmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodestartContext codestart() {
			return GetRuleContext<CodestartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIFKEYWORD() { return GetToken(ArcscriptParser.ENDIFKEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeendContext codeend() {
			return GetRuleContext<CodeendContext>(0);
		}
		public Endif_segmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endif_segment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndif_segment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Endif_segmentContext endif_segment() {
		Endif_segmentContext _localctx = new Endif_segmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_endif_segment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			codestart();
			State = 177;
			Match(ENDIFKEYWORD);
			State = 178;
			codeend();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_assignmentContext : ParserRuleContext {
		public IToken _VARIABLE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ArcscriptParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_orContext compound_condition_or() {
			return GetRuleContext<Compound_condition_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNADD() { return GetToken(ArcscriptParser.ASSIGNADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNSUB() { return GetToken(ArcscriptParser.ASSIGNSUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMUL() { return GetToken(ArcscriptParser.ASSIGNMUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNDIV() { return GetToken(ArcscriptParser.ASSIGNDIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ArcscriptParser.ASSIGN, 0); }
		public Statement_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_assignmentContext statement_assignment() {
		Statement_assignmentContext _localctx = new Statement_assignmentContext(Context, State);
		EnterRule(_localctx, 34, RULE_statement_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_localctx._VARIABLE = Match(VARIABLE);
			State = 181;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8591900672L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 182;
			compound_condition_or();
			this.assertVariable(_localctx._VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Void_function_callContext void_function_call() {
			return GetRuleContext<Void_function_callContext>(0);
		}
		public Statement_function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_function_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_function_callContext statement_function_call() {
		Statement_function_callContext _localctx = new Statement_function_callContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement_function_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			void_function_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ArcscriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ArcscriptParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 38, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			argument();
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 188;
				Match(COMMA);
				State = 189;
				argument();
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Additive_numeric_expressionContext additive_numeric_expression() {
			return GetRuleContext<Additive_numeric_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ArcscriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MentionContext mention() {
			return GetRuleContext<MentionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 40, RULE_argument);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOAT:
			case INTEGER:
			case LPAREN:
			case ADD:
			case SUB:
			case FNAME:
			case VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 195;
				additive_numeric_expression();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196;
				Match(STRING);
				}
				break;
			case MENTION_TAG_OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 197;
				mention();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MentionContext : ParserRuleContext {
		public Mention_attributesContext _mention_attributes;
		public IList<Mention_attributesContext> _attr = new List<Mention_attributesContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENTION_TAG_OPEN() { return GetToken(ArcscriptParser.MENTION_TAG_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_CLOSE() { return GetToken(ArcscriptParser.TAG_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_OPEN() { return GetToken(ArcscriptParser.TAG_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENTION_TAG_CLOSE() { return GetToken(ArcscriptParser.MENTION_TAG_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENTION_LABEL() { return GetToken(ArcscriptParser.MENTION_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Mention_attributesContext[] mention_attributes() {
			return GetRuleContexts<Mention_attributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mention_attributesContext mention_attributes(int i) {
			return GetRuleContext<Mention_attributesContext>(i);
		}
		public MentionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mention; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMention(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MentionContext mention() {
		MentionContext _localctx = new MentionContext(Context, State);
		EnterRule(_localctx, 42, RULE_mention);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(MENTION_TAG_OPEN);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ATTR_NAME) {
				{
				{
				State = 201;
				_localctx._mention_attributes = mention_attributes();
				_localctx._attr.Add(_localctx._mention_attributes);
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 207;
			Match(TAG_CLOSE);
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MENTION_LABEL) {
				{
				State = 208;
				Match(MENTION_LABEL);
				}
			}

			State = 211;
			Match(TAG_OPEN);
			State = 212;
			Match(MENTION_TAG_CLOSE);
			State = 213;
			if (!(this.assertMention(_localctx._attr))) throw new FailedPredicateException(this, "this.assertMention($attr)");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mention_attributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTR_NAME() { return GetToken(ArcscriptParser.ATTR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_EQUALS() { return GetToken(ArcscriptParser.TAG_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTR_VALUE() { return GetToken(ArcscriptParser.ATTR_VALUE, 0); }
		public Mention_attributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mention_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMention_attributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mention_attributesContext mention_attributes() {
		Mention_attributesContext _localctx = new Mention_attributesContext(Context, State);
		EnterRule(_localctx, 44, RULE_mention_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(ATTR_NAME);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG_EQUALS) {
				{
				State = 216;
				Match(TAG_EQUALS);
				State = 217;
				Match(ATTR_VALUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_numeric_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_numeric_expressionContext multiplicative_numeric_expression() {
			return GetRuleContext<Multiplicative_numeric_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_numeric_expressionContext additive_numeric_expression() {
			return GetRuleContext<Additive_numeric_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ArcscriptParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ArcscriptParser.SUB, 0); }
		public Additive_numeric_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_numeric_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_numeric_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_numeric_expressionContext additive_numeric_expression() {
		Additive_numeric_expressionContext _localctx = new Additive_numeric_expressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_additive_numeric_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			multiplicative_numeric_expression();
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADD || _la==SUB) {
				{
				State = 221;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUB) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 222;
				additive_numeric_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_numeric_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_unary_numeric_expressionContext signed_unary_numeric_expression() {
			return GetRuleContext<Signed_unary_numeric_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_numeric_expressionContext multiplicative_numeric_expression() {
			return GetRuleContext<Multiplicative_numeric_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(ArcscriptParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ArcscriptParser.DIV, 0); }
		public Multiplicative_numeric_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_numeric_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_numeric_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_numeric_expressionContext multiplicative_numeric_expression() {
		Multiplicative_numeric_expressionContext _localctx = new Multiplicative_numeric_expressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_multiplicative_numeric_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			signed_unary_numeric_expression();
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUL || _la==DIV) {
				{
				State = 226;
				_la = TokenStream.LA(1);
				if ( !(_la==MUL || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 227;
				multiplicative_numeric_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_unary_numeric_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_numeric_expressionContext unary_numeric_expression() {
			return GetRuleContext<Unary_numeric_expressionContext>(0);
		}
		public Signed_unary_numeric_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_unary_numeric_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_unary_numeric_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_unary_numeric_expressionContext signed_unary_numeric_expression() {
		Signed_unary_numeric_expressionContext _localctx = new Signed_unary_numeric_expressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_signed_unary_numeric_expression);
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case SUB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 230;
				sign();
				State = 231;
				unary_numeric_expression();
				}
				break;
			case FLOAT:
			case INTEGER:
			case LPAREN:
			case FNAME:
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233;
				unary_numeric_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_numeric_expressionContext : ParserRuleContext {
		public IToken _VARIABLE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ArcscriptParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ArcscriptParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ArcscriptParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ArcscriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_orContext compound_condition_or() {
			return GetRuleContext<Compound_condition_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ArcscriptParser.RPAREN, 0); }
		public Unary_numeric_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_numeric_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_numeric_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_numeric_expressionContext unary_numeric_expression() {
		Unary_numeric_expressionContext _localctx = new Unary_numeric_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_unary_numeric_expression);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236;
				Match(FLOAT);
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237;
				_localctx._VARIABLE = Match(VARIABLE);
				this.assertVariable(_localctx._VARIABLE);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 239;
				Match(INTEGER);
				}
				break;
			case FNAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 240;
				function_call();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 241;
				Match(LPAREN);
				State = 242;
				compound_condition_or();
				State = 243;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public IToken _FNAME;
		public Argument_listContext _argument_list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FNAME() { return GetToken(ArcscriptParser.FNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ArcscriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ArcscriptParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 54, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			_localctx._FNAME = Match(FNAME);
			State = 248;
			Match(LPAREN);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3378249501554688L) != 0)) {
				{
				State = 249;
				_localctx._argument_list = argument_list();
				}
			}

			State = 252;
			Match(RPAREN);
			this.assertFunctionArguments(_localctx._FNAME, _localctx._argument_list);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Void_function_callContext : ParserRuleContext {
		public IToken _VFNAME;
		public Argument_listContext _argument_list;
		public IToken _VFNAMEVARS;
		public Variable_listContext _variable_list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VFNAME() { return GetToken(ArcscriptParser.VFNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ArcscriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ArcscriptParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VFNAMEVARS() { return GetToken(ArcscriptParser.VFNAMEVARS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_listContext variable_list() {
			return GetRuleContext<Variable_listContext>(0);
		}
		public Void_function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_void_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoid_function_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Void_function_callContext void_function_call() {
		Void_function_callContext _localctx = new Void_function_callContext(Context, State);
		EnterRule(_localctx, 56, RULE_void_function_call);
		int _la;
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VFNAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				_localctx._VFNAME = Match(VFNAME);
				State = 256;
				Match(LPAREN);
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3378249501554688L) != 0)) {
					{
					State = 257;
					_localctx._argument_list = argument_list();
					}
				}

				State = 260;
				Match(RPAREN);
				this.assertFunctionArguments(_localctx._VFNAME, _localctx._argument_list);
				}
				break;
			case VFNAMEVARS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 262;
				_localctx._VFNAMEVARS = Match(VFNAMEVARS);
				State = 263;
				Match(LPAREN);
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 264;
					_localctx._variable_list = variable_list();
					}
				}

				State = 267;
				Match(RPAREN);
				this.assertFunctionArguments(_localctx._VFNAMEVARS, _localctx._variable_list);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ArcscriptParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ArcscriptParser.SUB, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 58, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_listContext : ParserRuleContext {
		public IToken _VARIABLE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(ArcscriptParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(ArcscriptParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ArcscriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ArcscriptParser.COMMA, i);
		}
		public Variable_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_listContext variable_list() {
		Variable_listContext _localctx = new Variable_listContext(Context, State);
		EnterRule(_localctx, 60, RULE_variable_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			_localctx._VARIABLE = Match(VARIABLE);
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 274;
				Match(COMMA);
				State = 275;
				_localctx._VARIABLE = Match(VARIABLE);
				}
				}
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			this.assertVariable(_localctx._VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_condition_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_andContext compound_condition_and() {
			return GetRuleContext<Compound_condition_andContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_orContext compound_condition_or() {
			return GetRuleContext<Compound_condition_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ArcscriptParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORKEYWORD() { return GetToken(ArcscriptParser.ORKEYWORD, 0); }
		public Compound_condition_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_condition_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_condition_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_condition_orContext compound_condition_or() {
		Compound_condition_orContext _localctx = new Compound_condition_orContext(Context, State);
		EnterRule(_localctx, 62, RULE_compound_condition_or);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			compound_condition_and();
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR || _la==ORKEYWORD) {
				{
				State = 284;
				_la = TokenStream.LA(1);
				if ( !(_la==OR || _la==ORKEYWORD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 285;
				compound_condition_or();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_condition_andContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Negated_unary_conditionContext negated_unary_condition() {
			return GetRuleContext<Negated_unary_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_andContext compound_condition_and() {
			return GetRuleContext<Compound_condition_andContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ArcscriptParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDKEYWORD() { return GetToken(ArcscriptParser.ANDKEYWORD, 0); }
		public Compound_condition_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_condition_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_condition_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_condition_andContext compound_condition_and() {
		Compound_condition_andContext _localctx = new Compound_condition_andContext(Context, State);
		EnterRule(_localctx, 64, RULE_compound_condition_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			negated_unary_condition();
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND || _la==ANDKEYWORD) {
				{
				State = 289;
				_la = TokenStream.LA(1);
				if ( !(_la==AND || _la==ANDKEYWORD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 290;
				compound_condition_and();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Negated_unary_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_conditionContext unary_condition() {
			return GetRuleContext<Unary_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEG() { return GetToken(ArcscriptParser.NEG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTKEYWORD() { return GetToken(ArcscriptParser.NOTKEYWORD, 0); }
		public Negated_unary_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negated_unary_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegated_unary_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Negated_unary_conditionContext negated_unary_condition() {
		Negated_unary_conditionContext _localctx = new Negated_unary_conditionContext(Context, State);
		EnterRule(_localctx, 66, RULE_negated_unary_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEG || _la==NOTKEYWORD) {
				{
				State = 293;
				_la = TokenStream.LA(1);
				if ( !(_la==NEG || _la==NOTKEYWORD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 296;
			unary_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Unary_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_conditionContext unary_condition() {
		Unary_conditionContext _localctx = new Unary_conditionContext(Context, State);
		EnterRule(_localctx, 68, RULE_unary_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_operatorContext conditional_operator() {
			return GetRuleContext<Conditional_operatorContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 70, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			expression();
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281477090639872L) != 0)) {
				{
				State = 301;
				conditional_operator();
				State = 302;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ArcscriptParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(ArcscriptParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ArcscriptParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(ArcscriptParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ArcscriptParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(ArcscriptParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISKEYWORD() { return GetToken(ArcscriptParser.ISKEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTKEYWORD() { return GetToken(ArcscriptParser.NOTKEYWORD, 0); }
		public Conditional_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_operatorContext conditional_operator() {
		Conditional_operatorContext _localctx = new Conditional_operatorContext(Context, State);
		EnterRule(_localctx, 72, RULE_conditional_operator);
		try {
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306;
				Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 307;
				Match(GE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 308;
				Match(LT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 309;
				Match(LE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 310;
				Match(EQ);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 311;
				Match(NE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 312;
				Match(ISKEYWORD);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 313;
				Match(ISKEYWORD);
				State = 314;
				Match(NOTKEYWORD);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ArcscriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(ArcscriptParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Additive_numeric_expressionContext additive_numeric_expression() {
			return GetRuleContext<Additive_numeric_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_expression);
		try {
			State = 320;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 317;
				Match(STRING);
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 318;
				Match(BOOLEAN);
				}
				break;
			case FLOAT:
			case INTEGER:
			case LPAREN:
			case ADD:
			case SUB:
			case FNAME:
			case VARIABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 319;
				additive_numeric_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return mention_sempred((MentionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool mention_sempred(MentionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.assertMention(_localctx._attr);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,61,323,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,85,8,0,1,1,4,1,
		88,8,1,11,1,12,1,89,1,2,4,2,93,8,2,11,2,12,2,94,1,2,4,2,98,8,2,11,2,12,
		2,99,1,2,1,2,1,2,3,2,105,8,2,1,3,1,3,1,3,1,3,5,3,111,8,3,10,3,12,3,114,
		9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,126,8,5,1,6,1,6,1,6,1,
		6,3,6,132,8,6,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,5,10,146,
		8,10,10,10,12,10,149,9,10,1,10,3,10,152,8,10,1,10,1,10,1,11,1,11,1,11,
		1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
		1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,
		1,18,1,19,1,19,1,19,5,19,191,8,19,10,19,12,19,194,9,19,1,20,1,20,1,20,
		3,20,199,8,20,1,21,1,21,5,21,203,8,21,10,21,12,21,206,9,21,1,21,1,21,3,
		21,210,8,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,3,22,219,8,22,1,23,1,23,
		1,23,3,23,224,8,23,1,24,1,24,1,24,3,24,229,8,24,1,25,1,25,1,25,1,25,3,
		25,235,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,246,8,26,
		1,27,1,27,1,27,3,27,251,8,27,1,27,1,27,1,27,1,28,1,28,1,28,3,28,259,8,
		28,1,28,1,28,1,28,1,28,1,28,3,28,266,8,28,1,28,1,28,3,28,270,8,28,1,29,
		1,29,1,30,1,30,1,30,5,30,277,8,30,10,30,12,30,280,9,30,1,30,1,30,1,31,
		1,31,1,31,3,31,287,8,31,1,32,1,32,1,32,3,32,292,8,32,1,33,3,33,295,8,33,
		1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,35,3,35,305,8,35,1,36,1,36,1,36,1,
		36,1,36,1,36,1,36,1,36,1,36,3,36,316,8,36,1,37,1,37,1,37,3,37,321,8,37,
		1,37,2,94,99,0,38,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,0,6,2,0,17,20,
		33,33,1,0,23,24,1,0,21,22,2,0,32,32,47,47,2,0,31,31,46,46,2,0,34,34,49,
		49,330,0,84,1,0,0,0,2,87,1,0,0,0,4,104,1,0,0,0,6,106,1,0,0,0,8,117,1,0,
		0,0,10,125,1,0,0,0,12,131,1,0,0,0,14,133,1,0,0,0,16,135,1,0,0,0,18,139,
		1,0,0,0,20,143,1,0,0,0,22,155,1,0,0,0,24,160,1,0,0,0,26,165,1,0,0,0,28,
		170,1,0,0,0,30,173,1,0,0,0,32,176,1,0,0,0,34,180,1,0,0,0,36,185,1,0,0,
		0,38,187,1,0,0,0,40,198,1,0,0,0,42,200,1,0,0,0,44,215,1,0,0,0,46,220,1,
		0,0,0,48,225,1,0,0,0,50,234,1,0,0,0,52,245,1,0,0,0,54,247,1,0,0,0,56,269,
		1,0,0,0,58,271,1,0,0,0,60,273,1,0,0,0,62,283,1,0,0,0,64,288,1,0,0,0,66,
		294,1,0,0,0,68,298,1,0,0,0,70,300,1,0,0,0,72,315,1,0,0,0,74,320,1,0,0,
		0,76,77,3,2,1,0,77,78,5,0,0,1,78,85,1,0,0,0,79,80,3,12,6,0,80,81,3,62,
		31,0,81,82,3,14,7,0,82,83,5,0,0,1,83,85,1,0,0,0,84,76,1,0,0,0,84,79,1,
		0,0,0,85,1,1,0,0,0,86,88,3,4,2,0,87,86,1,0,0,0,88,89,1,0,0,0,89,87,1,0,
		0,0,89,90,1,0,0,0,90,3,1,0,0,0,91,93,3,6,3,0,92,91,1,0,0,0,93,94,1,0,0,
		0,94,95,1,0,0,0,94,92,1,0,0,0,95,105,1,0,0,0,96,98,3,8,4,0,97,96,1,0,0,
		0,98,99,1,0,0,0,99,100,1,0,0,0,99,97,1,0,0,0,100,105,1,0,0,0,101,105,3,
		16,8,0,102,105,3,18,9,0,103,105,3,20,10,0,104,92,1,0,0,0,104,97,1,0,0,
		0,104,101,1,0,0,0,104,102,1,0,0,0,104,103,1,0,0,0,105,5,1,0,0,0,106,112,
		5,3,0,0,107,111,3,8,4,0,108,111,3,16,8,0,109,111,3,18,9,0,110,107,1,0,
		0,0,110,108,1,0,0,0,110,109,1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,112,
		113,1,0,0,0,113,115,1,0,0,0,114,112,1,0,0,0,115,116,5,8,0,0,116,7,1,0,
		0,0,117,118,3,10,5,0,118,119,5,5,0,0,119,120,6,4,-1,0,120,9,1,0,0,0,121,
		122,5,2,0,0,122,126,6,5,-1,0,123,124,5,7,0,0,124,126,6,5,-1,0,125,121,
		1,0,0,0,125,123,1,0,0,0,126,11,1,0,0,0,127,128,5,1,0,0,128,132,6,6,-1,
		0,129,130,5,6,0,0,130,132,6,6,-1,0,131,127,1,0,0,0,131,129,1,0,0,0,132,
		13,1,0,0,0,133,134,5,10,0,0,134,15,1,0,0,0,135,136,3,12,6,0,136,137,3,
		34,17,0,137,138,3,14,7,0,138,17,1,0,0,0,139,140,3,12,6,0,140,141,3,36,
		18,0,141,142,3,14,7,0,142,19,1,0,0,0,143,147,3,22,11,0,144,146,3,24,12,
		0,145,144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,
		151,1,0,0,0,149,147,1,0,0,0,150,152,3,26,13,0,151,150,1,0,0,0,151,152,
		1,0,0,0,152,153,1,0,0,0,153,154,3,32,16,0,154,21,1,0,0,0,155,156,3,12,
		6,0,156,157,3,28,14,0,157,158,3,14,7,0,158,159,3,2,1,0,159,23,1,0,0,0,
		160,161,3,12,6,0,161,162,3,30,15,0,162,163,3,14,7,0,163,164,3,2,1,0,164,
		25,1,0,0,0,165,166,3,12,6,0,166,167,5,43,0,0,167,168,3,14,7,0,168,169,
		3,2,1,0,169,27,1,0,0,0,170,171,5,42,0,0,171,172,3,62,31,0,172,29,1,0,0,
		0,173,174,5,44,0,0,174,175,3,62,31,0,175,31,1,0,0,0,176,177,3,12,6,0,177,
		178,5,45,0,0,178,179,3,14,7,0,179,33,1,0,0,0,180,181,5,51,0,0,181,182,
		7,0,0,0,182,183,3,62,31,0,183,184,6,17,-1,0,184,35,1,0,0,0,185,186,3,56,
		28,0,186,37,1,0,0,0,187,192,3,40,20,0,188,189,5,35,0,0,189,191,3,40,20,
		0,190,188,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,
		39,1,0,0,0,194,192,1,0,0,0,195,199,3,46,23,0,196,199,5,50,0,0,197,199,
		3,42,21,0,198,195,1,0,0,0,198,196,1,0,0,0,198,197,1,0,0,0,199,41,1,0,0,
		0,200,204,5,11,0,0,201,203,3,44,22,0,202,201,1,0,0,0,203,206,1,0,0,0,204,
		202,1,0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,209,5,
		53,0,0,208,210,5,59,0,0,209,208,1,0,0,0,209,210,1,0,0,0,210,211,1,0,0,
		0,211,212,5,58,0,0,212,213,5,56,0,0,213,214,4,21,0,1,214,43,1,0,0,0,215,
		218,5,54,0,0,216,217,5,55,0,0,217,219,5,60,0,0,218,216,1,0,0,0,218,219,
		1,0,0,0,219,45,1,0,0,0,220,223,3,48,24,0,221,222,7,1,0,0,222,224,3,46,
		23,0,223,221,1,0,0,0,223,224,1,0,0,0,224,47,1,0,0,0,225,228,3,50,25,0,
		226,227,7,2,0,0,227,229,3,48,24,0,228,226,1,0,0,0,228,229,1,0,0,0,229,
		49,1,0,0,0,230,231,3,58,29,0,231,232,3,52,26,0,232,235,1,0,0,0,233,235,
		3,52,26,0,234,230,1,0,0,0,234,233,1,0,0,0,235,51,1,0,0,0,236,246,5,12,
		0,0,237,238,5,51,0,0,238,246,6,26,-1,0,239,246,5,13,0,0,240,246,3,54,27,
		0,241,242,5,15,0,0,242,243,3,62,31,0,243,244,5,16,0,0,244,246,1,0,0,0,
		245,236,1,0,0,0,245,237,1,0,0,0,245,239,1,0,0,0,245,240,1,0,0,0,245,241,
		1,0,0,0,246,53,1,0,0,0,247,248,5,39,0,0,248,250,5,15,0,0,249,251,3,38,
		19,0,250,249,1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,253,5,16,0,0,
		253,254,6,27,-1,0,254,55,1,0,0,0,255,256,5,40,0,0,256,258,5,15,0,0,257,
		259,3,38,19,0,258,257,1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,261,
		5,16,0,0,261,270,6,28,-1,0,262,263,5,41,0,0,263,265,5,15,0,0,264,266,3,
		60,30,0,265,264,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,5,16,0,
		0,268,270,6,28,-1,0,269,255,1,0,0,0,269,262,1,0,0,0,270,57,1,0,0,0,271,
		272,7,1,0,0,272,59,1,0,0,0,273,278,5,51,0,0,274,275,5,35,0,0,275,277,5,
		51,0,0,276,274,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,
		279,281,1,0,0,0,280,278,1,0,0,0,281,282,6,30,-1,0,282,61,1,0,0,0,283,286,
		3,64,32,0,284,285,7,3,0,0,285,287,3,62,31,0,286,284,1,0,0,0,286,287,1,
		0,0,0,287,63,1,0,0,0,288,291,3,66,33,0,289,290,7,4,0,0,290,292,3,64,32,
		0,291,289,1,0,0,0,291,292,1,0,0,0,292,65,1,0,0,0,293,295,7,5,0,0,294,293,
		1,0,0,0,294,295,1,0,0,0,295,296,1,0,0,0,296,297,3,68,34,0,297,67,1,0,0,
		0,298,299,3,70,35,0,299,69,1,0,0,0,300,304,3,74,37,0,301,302,3,72,36,0,
		302,303,3,74,37,0,303,305,1,0,0,0,304,301,1,0,0,0,304,305,1,0,0,0,305,
		71,1,0,0,0,306,316,5,26,0,0,307,316,5,25,0,0,308,316,5,28,0,0,309,316,
		5,27,0,0,310,316,5,29,0,0,311,316,5,30,0,0,312,316,5,48,0,0,313,314,5,
		48,0,0,314,316,5,49,0,0,315,306,1,0,0,0,315,307,1,0,0,0,315,308,1,0,0,
		0,315,309,1,0,0,0,315,310,1,0,0,0,315,311,1,0,0,0,315,312,1,0,0,0,315,
		313,1,0,0,0,316,73,1,0,0,0,317,321,5,50,0,0,318,321,5,38,0,0,319,321,3,
		46,23,0,320,317,1,0,0,0,320,318,1,0,0,0,320,319,1,0,0,0,321,75,1,0,0,0,
		31,84,89,94,99,104,110,112,125,131,147,151,192,198,204,209,218,223,228,
		234,245,250,258,265,269,278,286,291,294,304,315,320
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Arcweave.Interpreter
