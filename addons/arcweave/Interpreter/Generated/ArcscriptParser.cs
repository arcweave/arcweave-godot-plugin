//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ArcscriptParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Arcweave.Interpreter {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ArcscriptParser : ArcscriptParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CODESTART=1, PARAGRAPHSTART=2, BLOCKQUOTESTART=3, NORMAL_WHITESPACE=4, 
		PARAGRAPHEND=5, BQ_PARAGRAPHSTART=6, BLOCKQUOTEEND=7, BQ_WHITESPACE=8, 
		CODEEND=9, MENTION_TAG_OPEN=10, FLOAT=11, INTEGER=12, DIGIT=13, LPAREN=14, 
		RPAREN=15, ASSIGNMUL=16, ASSIGNDIV=17, ASSIGNADD=18, ASSIGNSUB=19, MUL=20, 
		DIV=21, ADD=22, SUB=23, GE=24, GT=25, LE=26, LT=27, EQ=28, NE=29, AND=30, 
		OR=31, ASSIGN=32, NEG=33, COMMA=34, LBRACE=35, RBRACE=36, BOOLEAN=37, 
		FNAME=38, VFNAME=39, VFNAMEVARS=40, IFKEYWORD=41, ELSEKEYWORD=42, ELSEIFKEYWORD=43, 
		ENDIFKEYWORD=44, ANDKEYWORD=45, ORKEYWORD=46, ISKEYWORD=47, NOTKEYWORD=48, 
		STRING=49, VARIABLE=50, WHITESPACE=51, TAG_CLOSE=52, ATTR_NAME=53, TAG_EQUALS=54, 
		MENTION_TAG_CLOSE=55, TAG_WHITESPACE=56, TAG_OPEN=57, MENTION_LABEL=58, 
		ATTR_VALUE=59, ATTRIBUTE=60;
	public const int
		RULE_input = 0, RULE_script = 1, RULE_script_section = 2, RULE_normal_text = 3, 
		RULE_paragraph = 4, RULE_paragraph_start = 5, RULE_codestart = 6, RULE_codeend = 7, 
		RULE_assignment_segment = 8, RULE_function_call_segment = 9, RULE_conditional_section = 10, 
		RULE_if_section = 11, RULE_else_if_section = 12, RULE_else_section = 13, 
		RULE_if_clause = 14, RULE_else_if_clause = 15, RULE_endif_segment = 16, 
		RULE_statement_assignment = 17, RULE_statement_function_call = 18, RULE_argument_list = 19, 
		RULE_argument = 20, RULE_mention = 21, RULE_mention_attributes = 22, RULE_additive_numeric_expression = 23, 
		RULE_multiplicative_numeric_expression = 24, RULE_signed_unary_numeric_expression = 25, 
		RULE_unary_numeric_expression = 26, RULE_function_call = 27, RULE_void_function_call = 28, 
		RULE_sign = 29, RULE_variable_list = 30, RULE_compound_condition_or = 31, 
		RULE_compound_condition_and = 32, RULE_negated_unary_condition = 33, RULE_unary_condition = 34, 
		RULE_condition = 35, RULE_conditional_operator = 36, RULE_expression = 37;
	public static readonly string[] ruleNames = {
		"input", "script", "script_section", "normal_text", "paragraph", "paragraph_start", 
		"codestart", "codeend", "assignment_segment", "function_call_segment", 
		"conditional_section", "if_section", "else_if_section", "else_section", 
		"if_clause", "else_if_clause", "endif_segment", "statement_assignment", 
		"statement_function_call", "argument_list", "argument", "mention", "mention_attributes", 
		"additive_numeric_expression", "multiplicative_numeric_expression", "signed_unary_numeric_expression", 
		"unary_numeric_expression", "function_call", "void_function_call", "sign", 
		"variable_list", "compound_condition_or", "compound_condition_and", "negated_unary_condition", 
		"unary_condition", "condition", "conditional_operator", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'</blockquote>'", null, "'</code></pre>'", 
		"'<span'", null, null, null, "'('", "')'", "'*='", "'/='", "'+='", "'-='", 
		"'*'", "'/'", "'+'", "'-'", null, null, null, null, "'=='", "'!='", null, 
		"'||'", null, "'!'", "','", "'{'", "'}'", null, null, "'show'", null, 
		"'if'", "'else'", "'elseif'", "'endif'", "'and'", "'or'", "'is'", "'not'", 
		null, null, null, "'>'", null, null, "'/span>'", null, "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CODESTART", "PARAGRAPHSTART", "BLOCKQUOTESTART", "NORMAL_WHITESPACE", 
		"PARAGRAPHEND", "BQ_PARAGRAPHSTART", "BLOCKQUOTEEND", "BQ_WHITESPACE", 
		"CODEEND", "MENTION_TAG_OPEN", "FLOAT", "INTEGER", "DIGIT", "LPAREN", 
		"RPAREN", "ASSIGNMUL", "ASSIGNDIV", "ASSIGNADD", "ASSIGNSUB", "MUL", "DIV", 
		"ADD", "SUB", "GE", "GT", "LE", "LT", "EQ", "NE", "AND", "OR", "ASSIGN", 
		"NEG", "COMMA", "LBRACE", "RBRACE", "BOOLEAN", "FNAME", "VFNAME", "VFNAMEVARS", 
		"IFKEYWORD", "ELSEKEYWORD", "ELSEIFKEYWORD", "ENDIFKEYWORD", "ANDKEYWORD", 
		"ORKEYWORD", "ISKEYWORD", "NOTKEYWORD", "STRING", "VARIABLE", "WHITESPACE", 
		"TAG_CLOSE", "ATTR_NAME", "TAG_EQUALS", "MENTION_TAG_CLOSE", "TAG_WHITESPACE", 
		"TAG_OPEN", "MENTION_LABEL", "ATTR_VALUE", "ATTRIBUTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ArcscriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ArcscriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ArcscriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ArcscriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ArcscriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodestartContext codestart() {
			return GetRuleContext<CodestartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_orContext compound_condition_or() {
			return GetRuleContext<Compound_condition_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeendContext codeend() {
			return GetRuleContext<CodeendContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76;
				script();
				State = 77;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 79;
				codestart();
				State = 80;
				compound_condition_or();
				State = 81;
				codeend();
				State = 82;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Script_sectionContext[] script_section() {
			return GetRuleContexts<Script_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Script_sectionContext script_section(int i) {
			return GetRuleContext<Script_sectionContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 2, RULE_script);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 86;
					script_section();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Script_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Normal_textContext[] normal_text() {
			return GetRuleContexts<Normal_textContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Normal_textContext normal_text(int i) {
			return GetRuleContext<Normal_textContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_segmentContext assignment_segment() {
			return GetRuleContext<Assignment_segmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_segmentContext function_call_segment() {
			return GetRuleContext<Function_call_segmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_sectionContext conditional_section() {
			return GetRuleContext<Conditional_sectionContext>(0);
		}
		public Script_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Script_sectionContext script_section() {
		Script_sectionContext _localctx = new Script_sectionContext(Context, State);
		EnterRule(_localctx, 4, RULE_script_section);
		try {
			int _alt;
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 91;
						normal_text();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 94;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				assignment_segment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 97;
				function_call_segment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 98;
				conditional_section();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Normal_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphContext[] paragraph() {
			return GetRuleContexts<ParagraphContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphContext paragraph(int i) {
			return GetRuleContext<ParagraphContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKQUOTESTART() { return GetToken(ArcscriptParser.BLOCKQUOTESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKQUOTEEND() { return GetToken(ArcscriptParser.BLOCKQUOTEEND, 0); }
		public Normal_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normal_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormal_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Normal_textContext normal_text() {
		Normal_textContext _localctx = new Normal_textContext(Context, State);
		EnterRule(_localctx, 6, RULE_normal_text);
		int _la;
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARAGRAPHSTART:
			case BQ_PARAGRAPHSTART:
				EnterOuterAlt(_localctx, 1);
				{
				State = 101;
				paragraph();
				}
				break;
			case BLOCKQUOTESTART:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				Match(BLOCKQUOTESTART);
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PARAGRAPHSTART || _la==BQ_PARAGRAPHSTART) {
					{
					{
					State = 103;
					paragraph();
					}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 109;
				Match(BLOCKQUOTEEND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParagraphContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Paragraph_startContext paragraph_start() {
			return GetRuleContext<Paragraph_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAGRAPHEND() { return GetToken(ArcscriptParser.PARAGRAPHEND, 0); }
		public ParagraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraph; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParagraphContext paragraph() {
		ParagraphContext _localctx = new ParagraphContext(Context, State);
		EnterRule(_localctx, 8, RULE_paragraph);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			paragraph_start();
			State = 113;
			Match(PARAGRAPHEND);
			 this.currentLine++;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Paragraph_startContext : ParserRuleContext {
		public IToken _PARAGRAPHSTART;
		public IToken _BQ_PARAGRAPHSTART;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAGRAPHSTART() { return GetToken(ArcscriptParser.PARAGRAPHSTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BQ_PARAGRAPHSTART() { return GetToken(ArcscriptParser.BQ_PARAGRAPHSTART, 0); }
		public Paragraph_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraph_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraph_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Paragraph_startContext paragraph_start() {
		Paragraph_startContext _localctx = new Paragraph_startContext(Context, State);
		EnterRule(_localctx, 10, RULE_paragraph_start);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARAGRAPHSTART:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				_localctx._PARAGRAPHSTART = Match(PARAGRAPHSTART);
				 this.setLineStart(_localctx._PARAGRAPHSTART); 
				}
				break;
			case BQ_PARAGRAPHSTART:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				_localctx._BQ_PARAGRAPHSTART = Match(BQ_PARAGRAPHSTART);
				 this.setLineStart(_localctx._BQ_PARAGRAPHSTART); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodestartContext : ParserRuleContext {
		public IToken _CODESTART;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODESTART() { return GetToken(ArcscriptParser.CODESTART, 0); }
		public CodestartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codestart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodestart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodestartContext codestart() {
		CodestartContext _localctx = new CodestartContext(Context, State);
		EnterRule(_localctx, 12, RULE_codestart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			_localctx._CODESTART = Match(CODESTART);
			 this.currentLine++; this.setLineStart(_localctx._CODESTART);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeendContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODEEND() { return GetToken(ArcscriptParser.CODEEND, 0); }
		public CodeendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeend; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeend(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeendContext codeend() {
		CodeendContext _localctx = new CodeendContext(Context, State);
		EnterRule(_localctx, 14, RULE_codeend);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(CODEEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_segmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodestartContext codestart() {
			return GetRuleContext<CodestartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_assignmentContext statement_assignment() {
			return GetRuleContext<Statement_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeendContext codeend() {
			return GetRuleContext<CodeendContext>(0);
		}
		public Assignment_segmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_segment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_segment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_segmentContext assignment_segment() {
		Assignment_segmentContext _localctx = new Assignment_segmentContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignment_segment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			codestart();
			State = 128;
			statement_assignment();
			State = 129;
			codeend();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_call_segmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodestartContext codestart() {
			return GetRuleContext<CodestartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_function_callContext statement_function_call() {
			return GetRuleContext<Statement_function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeendContext codeend() {
			return GetRuleContext<CodeendContext>(0);
		}
		public Function_call_segmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_segment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_segment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_segmentContext function_call_segment() {
		Function_call_segmentContext _localctx = new Function_call_segmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_function_call_segment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			codestart();
			State = 132;
			statement_function_call();
			State = 133;
			codeend();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_sectionContext if_section() {
			return GetRuleContext<If_sectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Endif_segmentContext endif_segment() {
			return GetRuleContext<Endif_segmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_sectionContext[] else_if_section() {
			return GetRuleContexts<Else_if_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_sectionContext else_if_section(int i) {
			return GetRuleContext<Else_if_sectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_sectionContext else_section() {
			return GetRuleContext<Else_sectionContext>(0);
		}
		public Conditional_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_sectionContext conditional_section() {
		Conditional_sectionContext _localctx = new Conditional_sectionContext(Context, State);
		EnterRule(_localctx, 20, RULE_conditional_section);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			if_section();
			State = 139;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 136;
					else_if_section();
					}
					} 
				}
				State = 141;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 142;
				else_section();
				}
				break;
			}
			State = 145;
			endif_segment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodestartContext codestart() {
			return GetRuleContext<CodestartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_clauseContext if_clause() {
			return GetRuleContext<If_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeendContext codeend() {
			return GetRuleContext<CodeendContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		public If_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_sectionContext if_section() {
		If_sectionContext _localctx = new If_sectionContext(Context, State);
		EnterRule(_localctx, 22, RULE_if_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			codestart();
			State = 148;
			if_clause();
			State = 149;
			codeend();
			State = 150;
			script();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodestartContext codestart() {
			return GetRuleContext<CodestartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_clauseContext else_if_clause() {
			return GetRuleContext<Else_if_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeendContext codeend() {
			return GetRuleContext<CodeendContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		public Else_if_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_sectionContext else_if_section() {
		Else_if_sectionContext _localctx = new Else_if_sectionContext(Context, State);
		EnterRule(_localctx, 24, RULE_else_if_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			codestart();
			State = 153;
			else_if_clause();
			State = 154;
			codeend();
			State = 155;
			script();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodestartContext codestart() {
			return GetRuleContext<CodestartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEKEYWORD() { return GetToken(ArcscriptParser.ELSEKEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeendContext codeend() {
			return GetRuleContext<CodeendContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		public Else_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_sectionContext else_section() {
		Else_sectionContext _localctx = new Else_sectionContext(Context, State);
		EnterRule(_localctx, 26, RULE_else_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			codestart();
			State = 158;
			Match(ELSEKEYWORD);
			State = 159;
			codeend();
			State = 160;
			script();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFKEYWORD() { return GetToken(ArcscriptParser.IFKEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_orContext compound_condition_or() {
			return GetRuleContext<Compound_condition_orContext>(0);
		}
		public If_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_clauseContext if_clause() {
		If_clauseContext _localctx = new If_clauseContext(Context, State);
		EnterRule(_localctx, 28, RULE_if_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(IFKEYWORD);
			State = 163;
			compound_condition_or();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIFKEYWORD() { return GetToken(ArcscriptParser.ELSEIFKEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_orContext compound_condition_or() {
			return GetRuleContext<Compound_condition_orContext>(0);
		}
		public Else_if_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_clauseContext else_if_clause() {
		Else_if_clauseContext _localctx = new Else_if_clauseContext(Context, State);
		EnterRule(_localctx, 30, RULE_else_if_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(ELSEIFKEYWORD);
			State = 166;
			compound_condition_or();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Endif_segmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodestartContext codestart() {
			return GetRuleContext<CodestartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIFKEYWORD() { return GetToken(ArcscriptParser.ENDIFKEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeendContext codeend() {
			return GetRuleContext<CodeendContext>(0);
		}
		public Endif_segmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endif_segment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndif_segment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Endif_segmentContext endif_segment() {
		Endif_segmentContext _localctx = new Endif_segmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_endif_segment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			codestart();
			State = 169;
			Match(ENDIFKEYWORD);
			State = 170;
			codeend();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_assignmentContext : ParserRuleContext {
		public IToken _VARIABLE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ArcscriptParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_orContext compound_condition_or() {
			return GetRuleContext<Compound_condition_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNADD() { return GetToken(ArcscriptParser.ASSIGNADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNSUB() { return GetToken(ArcscriptParser.ASSIGNSUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMUL() { return GetToken(ArcscriptParser.ASSIGNMUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNDIV() { return GetToken(ArcscriptParser.ASSIGNDIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ArcscriptParser.ASSIGN, 0); }
		public Statement_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_assignmentContext statement_assignment() {
		Statement_assignmentContext _localctx = new Statement_assignmentContext(Context, State);
		EnterRule(_localctx, 34, RULE_statement_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			_localctx._VARIABLE = Match(VARIABLE);
			State = 173;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4295950336L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 174;
			compound_condition_or();
			this.assertVariable(_localctx._VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Void_function_callContext void_function_call() {
			return GetRuleContext<Void_function_callContext>(0);
		}
		public Statement_function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_function_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_function_callContext statement_function_call() {
		Statement_function_callContext _localctx = new Statement_function_callContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement_function_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			void_function_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ArcscriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ArcscriptParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 38, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			argument();
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 180;
				Match(COMMA);
				State = 181;
				argument();
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Additive_numeric_expressionContext additive_numeric_expression() {
			return GetRuleContext<Additive_numeric_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ArcscriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MentionContext mention() {
			return GetRuleContext<MentionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 40, RULE_argument);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOAT:
			case INTEGER:
			case LPAREN:
			case ADD:
			case SUB:
			case FNAME:
			case VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187;
				additive_numeric_expression();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188;
				Match(STRING);
				}
				break;
			case MENTION_TAG_OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 189;
				mention();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MentionContext : ParserRuleContext {
		public Mention_attributesContext _mention_attributes;
		public IList<Mention_attributesContext> _attr = new List<Mention_attributesContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENTION_TAG_OPEN() { return GetToken(ArcscriptParser.MENTION_TAG_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_CLOSE() { return GetToken(ArcscriptParser.TAG_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_OPEN() { return GetToken(ArcscriptParser.TAG_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENTION_TAG_CLOSE() { return GetToken(ArcscriptParser.MENTION_TAG_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENTION_LABEL() { return GetToken(ArcscriptParser.MENTION_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Mention_attributesContext[] mention_attributes() {
			return GetRuleContexts<Mention_attributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mention_attributesContext mention_attributes(int i) {
			return GetRuleContext<Mention_attributesContext>(i);
		}
		public MentionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mention; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMention(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MentionContext mention() {
		MentionContext _localctx = new MentionContext(Context, State);
		EnterRule(_localctx, 42, RULE_mention);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(MENTION_TAG_OPEN);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ATTR_NAME) {
				{
				{
				State = 193;
				_localctx._mention_attributes = mention_attributes();
				_localctx._attr.Add(_localctx._mention_attributes);
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 199;
			Match(TAG_CLOSE);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MENTION_LABEL) {
				{
				State = 200;
				Match(MENTION_LABEL);
				}
			}

			State = 203;
			Match(TAG_OPEN);
			State = 204;
			Match(MENTION_TAG_CLOSE);
			State = 205;
			if (!(this.assertMention(_localctx._attr))) throw new FailedPredicateException(this, "this.assertMention($attr)");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mention_attributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTR_NAME() { return GetToken(ArcscriptParser.ATTR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_EQUALS() { return GetToken(ArcscriptParser.TAG_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTR_VALUE() { return GetToken(ArcscriptParser.ATTR_VALUE, 0); }
		public Mention_attributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mention_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMention_attributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mention_attributesContext mention_attributes() {
		Mention_attributesContext _localctx = new Mention_attributesContext(Context, State);
		EnterRule(_localctx, 44, RULE_mention_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(ATTR_NAME);
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG_EQUALS) {
				{
				State = 208;
				Match(TAG_EQUALS);
				State = 209;
				Match(ATTR_VALUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_numeric_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_numeric_expressionContext multiplicative_numeric_expression() {
			return GetRuleContext<Multiplicative_numeric_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_numeric_expressionContext additive_numeric_expression() {
			return GetRuleContext<Additive_numeric_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ArcscriptParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ArcscriptParser.SUB, 0); }
		public Additive_numeric_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_numeric_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_numeric_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_numeric_expressionContext additive_numeric_expression() {
		Additive_numeric_expressionContext _localctx = new Additive_numeric_expressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_additive_numeric_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			multiplicative_numeric_expression();
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADD || _la==SUB) {
				{
				State = 213;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUB) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 214;
				additive_numeric_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_numeric_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_unary_numeric_expressionContext signed_unary_numeric_expression() {
			return GetRuleContext<Signed_unary_numeric_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_numeric_expressionContext multiplicative_numeric_expression() {
			return GetRuleContext<Multiplicative_numeric_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(ArcscriptParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ArcscriptParser.DIV, 0); }
		public Multiplicative_numeric_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_numeric_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_numeric_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_numeric_expressionContext multiplicative_numeric_expression() {
		Multiplicative_numeric_expressionContext _localctx = new Multiplicative_numeric_expressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_multiplicative_numeric_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			signed_unary_numeric_expression();
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUL || _la==DIV) {
				{
				State = 218;
				_la = TokenStream.LA(1);
				if ( !(_la==MUL || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 219;
				multiplicative_numeric_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_unary_numeric_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_numeric_expressionContext unary_numeric_expression() {
			return GetRuleContext<Unary_numeric_expressionContext>(0);
		}
		public Signed_unary_numeric_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_unary_numeric_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_unary_numeric_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_unary_numeric_expressionContext signed_unary_numeric_expression() {
		Signed_unary_numeric_expressionContext _localctx = new Signed_unary_numeric_expressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_signed_unary_numeric_expression);
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case SUB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 222;
				sign();
				State = 223;
				unary_numeric_expression();
				}
				break;
			case FLOAT:
			case INTEGER:
			case LPAREN:
			case FNAME:
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225;
				unary_numeric_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_numeric_expressionContext : ParserRuleContext {
		public IToken _VARIABLE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ArcscriptParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ArcscriptParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ArcscriptParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ArcscriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_orContext compound_condition_or() {
			return GetRuleContext<Compound_condition_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ArcscriptParser.RPAREN, 0); }
		public Unary_numeric_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_numeric_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_numeric_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_numeric_expressionContext unary_numeric_expression() {
		Unary_numeric_expressionContext _localctx = new Unary_numeric_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_unary_numeric_expression);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228;
				Match(FLOAT);
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229;
				_localctx._VARIABLE = Match(VARIABLE);
				this.assertVariable(_localctx._VARIABLE);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 231;
				Match(INTEGER);
				}
				break;
			case FNAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 232;
				function_call();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 233;
				Match(LPAREN);
				State = 234;
				compound_condition_or();
				State = 235;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public IToken _FNAME;
		public Argument_listContext _argument_list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FNAME() { return GetToken(ArcscriptParser.FNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ArcscriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ArcscriptParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 54, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			_localctx._FNAME = Match(FNAME);
			State = 240;
			Match(LPAREN);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1689124750777344L) != 0)) {
				{
				State = 241;
				_localctx._argument_list = argument_list();
				}
			}

			State = 244;
			Match(RPAREN);
			this.assertFunctionArguments(_localctx._FNAME, _localctx._argument_list);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Void_function_callContext : ParserRuleContext {
		public IToken _VFNAME;
		public Argument_listContext _argument_list;
		public IToken _VFNAMEVARS;
		public Variable_listContext _variable_list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VFNAME() { return GetToken(ArcscriptParser.VFNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ArcscriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ArcscriptParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VFNAMEVARS() { return GetToken(ArcscriptParser.VFNAMEVARS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_listContext variable_list() {
			return GetRuleContext<Variable_listContext>(0);
		}
		public Void_function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_void_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoid_function_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Void_function_callContext void_function_call() {
		Void_function_callContext _localctx = new Void_function_callContext(Context, State);
		EnterRule(_localctx, 56, RULE_void_function_call);
		int _la;
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VFNAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				_localctx._VFNAME = Match(VFNAME);
				State = 248;
				Match(LPAREN);
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1689124750777344L) != 0)) {
					{
					State = 249;
					_localctx._argument_list = argument_list();
					}
				}

				State = 252;
				Match(RPAREN);
				this.assertFunctionArguments(_localctx._VFNAME, _localctx._argument_list);
				}
				break;
			case VFNAMEVARS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254;
				_localctx._VFNAMEVARS = Match(VFNAMEVARS);
				State = 255;
				Match(LPAREN);
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 256;
					_localctx._variable_list = variable_list();
					}
				}

				State = 259;
				Match(RPAREN);
				this.assertFunctionArguments(_localctx._VFNAMEVARS, _localctx._variable_list);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ArcscriptParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ArcscriptParser.SUB, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 58, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_listContext : ParserRuleContext {
		public IToken _VARIABLE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(ArcscriptParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(ArcscriptParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ArcscriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ArcscriptParser.COMMA, i);
		}
		public Variable_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_listContext variable_list() {
		Variable_listContext _localctx = new Variable_listContext(Context, State);
		EnterRule(_localctx, 60, RULE_variable_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			_localctx._VARIABLE = Match(VARIABLE);
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 266;
				Match(COMMA);
				State = 267;
				_localctx._VARIABLE = Match(VARIABLE);
				}
				}
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			this.assertVariable(_localctx._VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_condition_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_andContext compound_condition_and() {
			return GetRuleContext<Compound_condition_andContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_orContext compound_condition_or() {
			return GetRuleContext<Compound_condition_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ArcscriptParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORKEYWORD() { return GetToken(ArcscriptParser.ORKEYWORD, 0); }
		public Compound_condition_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_condition_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_condition_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_condition_orContext compound_condition_or() {
		Compound_condition_orContext _localctx = new Compound_condition_orContext(Context, State);
		EnterRule(_localctx, 62, RULE_compound_condition_or);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			compound_condition_and();
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR || _la==ORKEYWORD) {
				{
				State = 276;
				_la = TokenStream.LA(1);
				if ( !(_la==OR || _la==ORKEYWORD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 277;
				compound_condition_or();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_condition_andContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Negated_unary_conditionContext negated_unary_condition() {
			return GetRuleContext<Negated_unary_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_condition_andContext compound_condition_and() {
			return GetRuleContext<Compound_condition_andContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ArcscriptParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDKEYWORD() { return GetToken(ArcscriptParser.ANDKEYWORD, 0); }
		public Compound_condition_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_condition_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_condition_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_condition_andContext compound_condition_and() {
		Compound_condition_andContext _localctx = new Compound_condition_andContext(Context, State);
		EnterRule(_localctx, 64, RULE_compound_condition_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			negated_unary_condition();
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND || _la==ANDKEYWORD) {
				{
				State = 281;
				_la = TokenStream.LA(1);
				if ( !(_la==AND || _la==ANDKEYWORD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 282;
				compound_condition_and();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Negated_unary_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_conditionContext unary_condition() {
			return GetRuleContext<Unary_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEG() { return GetToken(ArcscriptParser.NEG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTKEYWORD() { return GetToken(ArcscriptParser.NOTKEYWORD, 0); }
		public Negated_unary_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negated_unary_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegated_unary_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Negated_unary_conditionContext negated_unary_condition() {
		Negated_unary_conditionContext _localctx = new Negated_unary_conditionContext(Context, State);
		EnterRule(_localctx, 66, RULE_negated_unary_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEG || _la==NOTKEYWORD) {
				{
				State = 285;
				_la = TokenStream.LA(1);
				if ( !(_la==NEG || _la==NOTKEYWORD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 288;
			unary_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Unary_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_conditionContext unary_condition() {
		Unary_conditionContext _localctx = new Unary_conditionContext(Context, State);
		EnterRule(_localctx, 68, RULE_unary_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_operatorContext conditional_operator() {
			return GetRuleContext<Conditional_operatorContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 70, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			expression();
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738545319936L) != 0)) {
				{
				State = 293;
				conditional_operator();
				State = 294;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ArcscriptParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(ArcscriptParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ArcscriptParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(ArcscriptParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ArcscriptParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(ArcscriptParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISKEYWORD() { return GetToken(ArcscriptParser.ISKEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTKEYWORD() { return GetToken(ArcscriptParser.NOTKEYWORD, 0); }
		public Conditional_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_operatorContext conditional_operator() {
		Conditional_operatorContext _localctx = new Conditional_operatorContext(Context, State);
		EnterRule(_localctx, 72, RULE_conditional_operator);
		try {
			State = 307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298;
				Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 299;
				Match(GE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 300;
				Match(LT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 301;
				Match(LE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 302;
				Match(EQ);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 303;
				Match(NE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 304;
				Match(ISKEYWORD);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 305;
				Match(ISKEYWORD);
				State = 306;
				Match(NOTKEYWORD);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ArcscriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(ArcscriptParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Additive_numeric_expressionContext additive_numeric_expression() {
			return GetRuleContext<Additive_numeric_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_expression);
		try {
			State = 312;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309;
				Match(STRING);
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310;
				Match(BOOLEAN);
				}
				break;
			case FLOAT:
			case INTEGER:
			case LPAREN:
			case ADD:
			case SUB:
			case FNAME:
			case VARIABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 311;
				additive_numeric_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return mention_sempred((MentionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool mention_sempred(MentionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.assertMention(_localctx._attr);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,60,315,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,85,8,0,1,1,4,1,
		88,8,1,11,1,12,1,89,1,2,4,2,93,8,2,11,2,12,2,94,1,2,1,2,1,2,3,2,100,8,
		2,1,3,1,3,1,3,5,3,105,8,3,10,3,12,3,108,9,3,1,3,3,3,111,8,3,1,4,1,4,1,
		4,1,4,1,5,1,5,1,5,1,5,3,5,121,8,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,
		1,9,1,9,1,9,1,9,1,10,1,10,5,10,138,8,10,10,10,12,10,141,9,10,1,10,3,10,
		144,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
		13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,
		16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,5,19,183,8,19,10,
		19,12,19,186,9,19,1,20,1,20,1,20,3,20,191,8,20,1,21,1,21,5,21,195,8,21,
		10,21,12,21,198,9,21,1,21,1,21,3,21,202,8,21,1,21,1,21,1,21,1,21,1,22,
		1,22,1,22,3,22,211,8,22,1,23,1,23,1,23,3,23,216,8,23,1,24,1,24,1,24,3,
		24,221,8,24,1,25,1,25,1,25,1,25,3,25,227,8,25,1,26,1,26,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,3,26,238,8,26,1,27,1,27,1,27,3,27,243,8,27,1,27,1,
		27,1,27,1,28,1,28,1,28,3,28,251,8,28,1,28,1,28,1,28,1,28,1,28,3,28,258,
		8,28,1,28,1,28,3,28,262,8,28,1,29,1,29,1,30,1,30,1,30,5,30,269,8,30,10,
		30,12,30,272,9,30,1,30,1,30,1,31,1,31,1,31,3,31,279,8,31,1,32,1,32,1,32,
		3,32,284,8,32,1,33,3,33,287,8,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,
		35,3,35,297,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,308,
		8,36,1,37,1,37,1,37,3,37,313,8,37,1,37,1,94,0,38,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
		66,68,70,72,74,0,6,2,0,16,19,32,32,1,0,22,23,1,0,20,21,2,0,31,31,46,46,
		2,0,30,30,45,45,2,0,33,33,48,48,318,0,84,1,0,0,0,2,87,1,0,0,0,4,99,1,0,
		0,0,6,110,1,0,0,0,8,112,1,0,0,0,10,120,1,0,0,0,12,122,1,0,0,0,14,125,1,
		0,0,0,16,127,1,0,0,0,18,131,1,0,0,0,20,135,1,0,0,0,22,147,1,0,0,0,24,152,
		1,0,0,0,26,157,1,0,0,0,28,162,1,0,0,0,30,165,1,0,0,0,32,168,1,0,0,0,34,
		172,1,0,0,0,36,177,1,0,0,0,38,179,1,0,0,0,40,190,1,0,0,0,42,192,1,0,0,
		0,44,207,1,0,0,0,46,212,1,0,0,0,48,217,1,0,0,0,50,226,1,0,0,0,52,237,1,
		0,0,0,54,239,1,0,0,0,56,261,1,0,0,0,58,263,1,0,0,0,60,265,1,0,0,0,62,275,
		1,0,0,0,64,280,1,0,0,0,66,286,1,0,0,0,68,290,1,0,0,0,70,292,1,0,0,0,72,
		307,1,0,0,0,74,312,1,0,0,0,76,77,3,2,1,0,77,78,5,0,0,1,78,85,1,0,0,0,79,
		80,3,12,6,0,80,81,3,62,31,0,81,82,3,14,7,0,82,83,5,0,0,1,83,85,1,0,0,0,
		84,76,1,0,0,0,84,79,1,0,0,0,85,1,1,0,0,0,86,88,3,4,2,0,87,86,1,0,0,0,88,
		89,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,3,1,0,0,0,91,93,3,6,3,0,92,91,
		1,0,0,0,93,94,1,0,0,0,94,95,1,0,0,0,94,92,1,0,0,0,95,100,1,0,0,0,96,100,
		3,16,8,0,97,100,3,18,9,0,98,100,3,20,10,0,99,92,1,0,0,0,99,96,1,0,0,0,
		99,97,1,0,0,0,99,98,1,0,0,0,100,5,1,0,0,0,101,111,3,8,4,0,102,106,5,3,
		0,0,103,105,3,8,4,0,104,103,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,
		107,1,0,0,0,107,109,1,0,0,0,108,106,1,0,0,0,109,111,5,7,0,0,110,101,1,
		0,0,0,110,102,1,0,0,0,111,7,1,0,0,0,112,113,3,10,5,0,113,114,5,5,0,0,114,
		115,6,4,-1,0,115,9,1,0,0,0,116,117,5,2,0,0,117,121,6,5,-1,0,118,119,5,
		6,0,0,119,121,6,5,-1,0,120,116,1,0,0,0,120,118,1,0,0,0,121,11,1,0,0,0,
		122,123,5,1,0,0,123,124,6,6,-1,0,124,13,1,0,0,0,125,126,5,9,0,0,126,15,
		1,0,0,0,127,128,3,12,6,0,128,129,3,34,17,0,129,130,3,14,7,0,130,17,1,0,
		0,0,131,132,3,12,6,0,132,133,3,36,18,0,133,134,3,14,7,0,134,19,1,0,0,0,
		135,139,3,22,11,0,136,138,3,24,12,0,137,136,1,0,0,0,138,141,1,0,0,0,139,
		137,1,0,0,0,139,140,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,142,144,3,
		26,13,0,143,142,1,0,0,0,143,144,1,0,0,0,144,145,1,0,0,0,145,146,3,32,16,
		0,146,21,1,0,0,0,147,148,3,12,6,0,148,149,3,28,14,0,149,150,3,14,7,0,150,
		151,3,2,1,0,151,23,1,0,0,0,152,153,3,12,6,0,153,154,3,30,15,0,154,155,
		3,14,7,0,155,156,3,2,1,0,156,25,1,0,0,0,157,158,3,12,6,0,158,159,5,42,
		0,0,159,160,3,14,7,0,160,161,3,2,1,0,161,27,1,0,0,0,162,163,5,41,0,0,163,
		164,3,62,31,0,164,29,1,0,0,0,165,166,5,43,0,0,166,167,3,62,31,0,167,31,
		1,0,0,0,168,169,3,12,6,0,169,170,5,44,0,0,170,171,3,14,7,0,171,33,1,0,
		0,0,172,173,5,50,0,0,173,174,7,0,0,0,174,175,3,62,31,0,175,176,6,17,-1,
		0,176,35,1,0,0,0,177,178,3,56,28,0,178,37,1,0,0,0,179,184,3,40,20,0,180,
		181,5,34,0,0,181,183,3,40,20,0,182,180,1,0,0,0,183,186,1,0,0,0,184,182,
		1,0,0,0,184,185,1,0,0,0,185,39,1,0,0,0,186,184,1,0,0,0,187,191,3,46,23,
		0,188,191,5,49,0,0,189,191,3,42,21,0,190,187,1,0,0,0,190,188,1,0,0,0,190,
		189,1,0,0,0,191,41,1,0,0,0,192,196,5,10,0,0,193,195,3,44,22,0,194,193,
		1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,
		0,198,196,1,0,0,0,199,201,5,52,0,0,200,202,5,58,0,0,201,200,1,0,0,0,201,
		202,1,0,0,0,202,203,1,0,0,0,203,204,5,57,0,0,204,205,5,55,0,0,205,206,
		4,21,0,1,206,43,1,0,0,0,207,210,5,53,0,0,208,209,5,54,0,0,209,211,5,59,
		0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,45,1,0,0,0,212,215,3,48,24,0,213,
		214,7,1,0,0,214,216,3,46,23,0,215,213,1,0,0,0,215,216,1,0,0,0,216,47,1,
		0,0,0,217,220,3,50,25,0,218,219,7,2,0,0,219,221,3,48,24,0,220,218,1,0,
		0,0,220,221,1,0,0,0,221,49,1,0,0,0,222,223,3,58,29,0,223,224,3,52,26,0,
		224,227,1,0,0,0,225,227,3,52,26,0,226,222,1,0,0,0,226,225,1,0,0,0,227,
		51,1,0,0,0,228,238,5,11,0,0,229,230,5,50,0,0,230,238,6,26,-1,0,231,238,
		5,12,0,0,232,238,3,54,27,0,233,234,5,14,0,0,234,235,3,62,31,0,235,236,
		5,15,0,0,236,238,1,0,0,0,237,228,1,0,0,0,237,229,1,0,0,0,237,231,1,0,0,
		0,237,232,1,0,0,0,237,233,1,0,0,0,238,53,1,0,0,0,239,240,5,38,0,0,240,
		242,5,14,0,0,241,243,3,38,19,0,242,241,1,0,0,0,242,243,1,0,0,0,243,244,
		1,0,0,0,244,245,5,15,0,0,245,246,6,27,-1,0,246,55,1,0,0,0,247,248,5,39,
		0,0,248,250,5,14,0,0,249,251,3,38,19,0,250,249,1,0,0,0,250,251,1,0,0,0,
		251,252,1,0,0,0,252,253,5,15,0,0,253,262,6,28,-1,0,254,255,5,40,0,0,255,
		257,5,14,0,0,256,258,3,60,30,0,257,256,1,0,0,0,257,258,1,0,0,0,258,259,
		1,0,0,0,259,260,5,15,0,0,260,262,6,28,-1,0,261,247,1,0,0,0,261,254,1,0,
		0,0,262,57,1,0,0,0,263,264,7,1,0,0,264,59,1,0,0,0,265,270,5,50,0,0,266,
		267,5,34,0,0,267,269,5,50,0,0,268,266,1,0,0,0,269,272,1,0,0,0,270,268,
		1,0,0,0,270,271,1,0,0,0,271,273,1,0,0,0,272,270,1,0,0,0,273,274,6,30,-1,
		0,274,61,1,0,0,0,275,278,3,64,32,0,276,277,7,3,0,0,277,279,3,62,31,0,278,
		276,1,0,0,0,278,279,1,0,0,0,279,63,1,0,0,0,280,283,3,66,33,0,281,282,7,
		4,0,0,282,284,3,64,32,0,283,281,1,0,0,0,283,284,1,0,0,0,284,65,1,0,0,0,
		285,287,7,5,0,0,286,285,1,0,0,0,286,287,1,0,0,0,287,288,1,0,0,0,288,289,
		3,68,34,0,289,67,1,0,0,0,290,291,3,70,35,0,291,69,1,0,0,0,292,296,3,74,
		37,0,293,294,3,72,36,0,294,295,3,74,37,0,295,297,1,0,0,0,296,293,1,0,0,
		0,296,297,1,0,0,0,297,71,1,0,0,0,298,308,5,25,0,0,299,308,5,24,0,0,300,
		308,5,27,0,0,301,308,5,26,0,0,302,308,5,28,0,0,303,308,5,29,0,0,304,308,
		5,47,0,0,305,306,5,47,0,0,306,308,5,48,0,0,307,298,1,0,0,0,307,299,1,0,
		0,0,307,300,1,0,0,0,307,301,1,0,0,0,307,302,1,0,0,0,307,303,1,0,0,0,307,
		304,1,0,0,0,307,305,1,0,0,0,308,73,1,0,0,0,309,313,5,49,0,0,310,313,5,
		37,0,0,311,313,3,46,23,0,312,309,1,0,0,0,312,310,1,0,0,0,312,311,1,0,0,
		0,313,75,1,0,0,0,29,84,89,94,99,106,110,120,139,143,184,190,196,201,210,
		215,220,226,237,242,250,257,261,270,278,283,286,296,307,312
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Arcweave.Interpreter
